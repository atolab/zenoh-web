<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zenoh - The Zero Overhead, Pub/Sub, Store, Query, and Compute Protocol.</title><link>/</link><description>Recent content on Zenoh - The Zero Overhead, Pub/Sub, Store, Query, and Compute Protocol.</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 10 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Zenoh Slides, Videos, Papers and More</title><link>/media/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/media/</guid><description>Slides Zenoh: The Edge Data Fabric Zenoh: Coding Lab Videos Zenoh: The Edge Data Fabric First Zenoh Summit &amp;ndash; June 2022</description></item><item><title>What is Zenoh?</title><link>/docs/overview/what-is-zenoh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/what-is-zenoh/</guid><description>Zenoh is the Next Big Thing in Internet Computing. You may think this is a bold statement, but hopefully after this short read you&amp;rsquo;ll share the perspective.
Technically speaking, Zenoh is a pub/sub/query protocol that unifies data in motion, data at rest and computations. That said, one way of thinking about Zenoh is to imagine it as a data liberator protocol. Zenoh liberates data in several dimensions.
Cloud to the Microcontroller Communication.</description></item><item><title>Zenoh in action</title><link>/docs/overview/zenoh-in-action/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/zenoh-in-action/</guid><description>Let us now look into a sample scenario of Zenoh working. Zenoh supports two paradigms of communication - publish-subscribe and queries.
Pub/Sub in Zenoh Query in Zenoh Pub/Sub in Zenoh This animation shows a basic pub/sub in action. The subscribers connected to the system receives the values send by the publishers routed efficicently through the Zenoh network. You can also observe the presence of a sleeping subscriber connected to the network.</description></item><item><title>Your first Zenoh app</title><link>/docs/getting-started/first-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/first-app/</guid><description>Let us take a step-by-step approach in putting together your first Zenoh application in Python. As the first step, let us see how we get some data from a temperature sensor in our kitchen. Then we see how we can route this data to store and perform some analytics.
Before cranking some code, let&amp;rsquo;s define some terminology.
Zenoh deals with keys/values where each key is a path and is associated to a value.</description></item><item><title>Installation</title><link>/docs/getting-started/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/installation/</guid><description>To start playing with Zenoh we need the Zenoh router and/or the Zenoh client library.
Installing client library To develop your application Zenoh, you need to install a Zenoh client library. Depending on your programming language, pick one of the following API and refer to the installation and usage instructions in here:
Rust API Python API C API Pico API: A port of Zenoh in C, targeted at low-power devices.</description></item><item><title>Deployment</title><link>/docs/getting-started/deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/deployment/</guid><description>Overview Peer to peer By default Zenoh applications are configured to communicate peer to peer (peer mode). All applications in the local network directly communicate with each other.
Configuration
{ mode: peer, } Scouting Zenoh applications in peer mode run both multicast and gossip scouting to discover other applications or Zenoh routers and connect them.
Multicast scouting
Zenoh applications in peer mode join multicast group 224.0.0.224 on UDP port 7446 and send scout messages on this address to discover local applications and routers.</description></item><item><title>For a quick test using Docker</title><link>/docs/getting-started/quick-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/quick-test/</guid><description>This page describe how to perform a quick test of Zenoh, using a Docker image.
Run Zenoh router in a Docker container The Zenoh router is also available in a Docker image. You can deploy a single instance on your local host just running:
docker run --init -p 7447:7447/tcp -p 8000:8000/tcp eclipse/zenoh The ports used by Zenoh are the following:
7447/tcp : the Zenoh protocol via TCP 8000/tcp : the Zenoh REST API ⚠️ WARNING ⚠️: Docker doesn&amp;rsquo;t support UDP multicast between a container and its host (see cases moby/moby#23659, moby/libnetwork#2397 or moby/libnetwork#552).</description></item><item><title>Troubleshooting</title><link>/docs/getting-started/troubleshooting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/troubleshooting/</guid><description>Activate logging Activating the Zenoh logging can provide useful information for any troubleshooting. The Zenoh router (zenohd) and all the Zenoh APIs (except zenoh-pico) are developed with a Rust code base. Logging is controlled via the RUST_LOG environment variable that can typically be defined with the desired logging level amongst:
error - this is the default level if RUST_LOG is not defined warn info debug trace off - to disable all logging More advanced logging directives can be defined via the RUST_LOG.</description></item><item><title>Abstractions</title><link>/docs/manual/abstractions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/abstractions/</guid><description>Zenoh is a distributed service to define, manage and operate on key/value spaces.
The main abstractions at the core of Zenoh are the following:
Key Zenoh operates on key/value pairs. The most important thing to know about Zenoh keys is that / is the hierarchical separator, just like in unix filesystems. While you could set up your own hierarchy using other separators, your Zenoh exchanges would benefit from better performance using /, as it will let Zenoh do clever optimisations (users have informed us in the past that switching from .</description></item><item><title>Configuration</title><link>/docs/manual/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/configuration/</guid><description>From version 0.6 of Zenoh, configuration has changed in major ways. This page will take you through the new behaviour of configuration, whether you&amp;rsquo;re using Zenoh as a library, or as an executable through zenohd.
Configuring zenohd There are 3 ways to configure zenohd, which may be used in any combination:
using a configuration file, through the command line arguments, and by putting values on the configuration through the adminspace. Configuration files zenohd has supported configuration files for a long time now, but with version 0.</description></item><item><title>Zenoh plugins</title><link>/docs/manual/plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/plugins/</guid><description>The Zenoh router (zenohd executable) supports the loading of plugins at start-up, or at runtime if write permission is configured on its admin space.
A Zenoh plugin is a library that can be loaded by the Zenoh router at start-up. It shares a runtime with it, allowing the plugin to use the regular Zenoh rust APIs with the same peer ID.
Zenoh already provides the following plugins in its default repository:</description></item><item><title>REST plugin</title><link>/docs/manual/plugin-http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/plugin-http/</guid><description>The REST plugin provides access to the Zenoh REST API by enabling an HTTP server on the Zenoh node where it is running.
Library name: zplugin_rest
There are two main ways to start this plugin:
Through startup arguments: zenohd&amp;rsquo;s --rest-http-port=[PORT | IP:PORT | none] argument allows you to choose which port will be listened to by the HTTP server. Note that the default value for this argument is 8000, meaning that unless you specify none explicitly, zenohd will use this plugin by default.</description></item><item><title>Storage manager plugin</title><link>/docs/manual/plugin-storage-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/plugin-storage-manager/</guid><description>The storage_manager plugin provides zenohd with the ability to store values associated with a set of keys, allowing other nodes to query the most recent values associated with these keys.
Library name: zplugin_storage_manager
Backends and Volumes Since there exist many ways for a Zenoh node to store values it may need to serve later, the storage manager plugin relies on dynamically loaded &amp;ldquo;backends&amp;rdquo; to provide this functionality. Typically, a backend will leverage some third-party technology, such as databases, to handle storage.</description></item><item><title>TLS authentication</title><link>/docs/manual/tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/tls/</guid><description>Zenoh supports TLS as a transport protocol. TLS can be configured in two ways:
server side authentication: clients validate the server TLS certificate but not the other way around, that is, the same way of operating on the web where the web browsers validate the identity of the server via means of the TLS certificate.
mutual authentication (mTLS): where both server-side and client-side authentication is required.
The configuration of TLS certificates is done via a configuration file.</description></item><item><title>QUIC transport</title><link>/docs/manual/quic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/quic/</guid><description>Zenoh supports QUIC as a transport protocol.
As you may already know, QUIC is a UDP-based, stream-multiplexing, encrypted transport protocol. It natively embeds TLS for encryption, authentication and confidentiality.
As of today, the only supported TLS authentication mode in Zenoh is server-authentication: clients validate the server TLS certificate but not the other way around. That is, the same way of operating on the web where the web browsers validate the identity of the server via means of the TLS certificate.</description></item><item><title>User-Password authentication</title><link>/docs/manual/user-password/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/user-password/</guid><description>Zenoh supports basic user-password authentication. Clients and peers can use user and password for authentication against a router or a peer. Similarly, peers and routers can use user and password for authentication among themselves. The configuration of credentials is done via a configuration file.
Client configuration The required configuration fields for a client would hence be:
{ /// The node&amp;#39;s mode (router, peer or client) mode: &amp;#34;client&amp;#34;, transport: { auth: { /// The configuration of authentication.</description></item><item><title>Rust API</title><link>/docs/apis/rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/apis/rust/</guid><description> The Rust API documentation is available on docs.rs.</description></item><item><title>C API</title><link>/docs/apis/c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/apis/c/</guid><description> The C API documentation is available on Read the Docs.</description></item><item><title>Python API</title><link>/docs/apis/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/apis/python/</guid><description> The Python API documentation is available on Read the Docs.</description></item><item><title>REST API</title><link>/docs/apis/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/apis/rest/</guid><description>Zenoh also offers a REST API via the zenoh-rest plugin. When starting Zenoh with default options, this REST plugin is automatically started on port 8000 and ready to answer HTTP requests.
The full Zenoh key/value space is accessible via this REST API, including the Admin Space under the '@'prefix.
GET Binds to the get(selector) operation on Zenoh.
URL: http://host:8000/&amp;lt;selector&amp;gt; body: none headers: none The results are returned as a JSON array of objects containing &amp;quot;key&amp;quot;, &amp;quot;value&amp;quot;and &amp;quot;time&amp;quot;.</description></item><item><title>Migrating from Zenoh v0.5.x to Zenoh v0.6.x</title><link>/docs/migration/migrationguide-v0.5.x-v0.6.x/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/migration/migrationguide-v0.5.x-v0.6.x/</guid><description>Key expressions Some key expressions are now considered invalid:
Heading slashes are forbidden. Example: &amp;quot;/key/expression&amp;quot;. Trailing slashes are forbidden. Example: &amp;quot;key/expression/&amp;quot;. Empty chunks are forbidden. Example: &amp;quot;key//expression&amp;quot;. An error will be returned when trying to use such invalid key expressions.
APIs In zenoh version 0.6.0, zenoh and zenoh-net APIs have been merged into a single API.
Configuration In v0.5.x the Zenoh configuration was a list of key/value pairs. In v0.6.x the has a structured format which can be expressed in JSON, JSON5 or YAML.</description></item><item><title>Migrating from Zenoh v0.5.x Rust API to Zenoh v0.6.x Rust API</title><link>/docs/migration/migrationguide-rust-v0.5.x-v0.6.x/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/migration/migrationguide-rust-v0.5.x-v0.6.x/</guid><description>In zenoh version 0.6.0, zenoh and zenoh-net APIs have been merged into a single API.
General considerations about the new Rust v0.6.x zenoh API Resolvables Most of the operations of the new API return builder structs that implement the Resolvable, SyncResolve and AsyncResolve traits. A res function needs to be called on those builders to obtain the final result of the operation. When using Rust sync, the SyncResolve trait needs to be used and the res function directly returns the final result.</description></item><item><title>Migrating from Zenoh-C v0.5.x zenoh-net API to Zenoh-C v0.6.x zenoh API</title><link>/docs/migration/migrationguide-c-v0.5.x-v0.6.x/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/migration/migrationguide-c-v0.5.x-v0.6.x/</guid><description>Opening a session All types and operations from the zn_* primitives have been updated and migrated to the z_* primitives.
zenoh v0.5.x
zn_properties_t *config = zn_config_default(); zn_session_t *s = zn_open(config); if (s == NULL) { printf(&amp;#34;Unable to open session!\n&amp;#34;); exit(-1); } zenoh v0.6.x
z_owned_config_t config = z_config_default(); z_owned_session_t s = z_open(z_move(config)); if (!z_check(s)) { printf(&amp;#34;Unable to open session!\n&amp;#34;); exit(-1); } Subscribing For this release, Zenoh-C only supports subscribers with callbacks. It is possible to access samples through a callback by calling the callback function passed as argument on declare_subscriber function.</description></item><item><title>Migrating from Zenoh v0.5.x Python API to Zenoh v0.6.x Python API</title><link>/docs/migration/migrationguide-python-v0.5.x-v0.6.x/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/migration/migrationguide-python-v0.5.x-v0.6.x/</guid><description>Explorability In previous releases, the Python bindings were entirely defined in Rust, making it very hard for Pythoners to explore it.
With 0.6, the bindings have evolved: a &amp;ldquo;private&amp;rdquo; layer is exposed by Rust, and wrapped in Python, with 2 main advantages:
IDEs can now find available symbols, signatures and documentation more easily. Any dynamic type handling is done in Python, letting you investigate what happens depending on the types of values you pass more easily.</description></item><item><title>Migrating from Zenoh-Pico v0.5.x to Zenoh-Pico v0.6.x</title><link>/docs/migration/migrationguide-pico-v0.5.x-v0.6.x/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/migration/migrationguide-pico-v0.5.x-v0.6.x/</guid><description>General considerations about the new Zenoh-Pico v0.6.x API Ownership model The new Zenoh-Pico API, similarly to the Zenoh-C API, introduced a more explicit ownership model to the user. Such model targets a better memory management where e.g. memory leaks can be easily identified and double free can be avoided. The user will have a clear understanding on what is owned by his side of the code, and what has been loaned or moved to the API.</description></item><item><title>Migrating from Zenoh-C to Zenoh-Pico (and vice-versa)</title><link>/docs/migration/migrationguide-zenohc-zenohpico/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/migration/migrationguide-zenohc-zenohpico/</guid><description>Both Zenoh-C and Zenoh-Pico APIs offer a C client API for the zenoh protocol, thus this release took an extra step to make Zenoh-C code to be compatible with Zenoh-Pico code (and vice-versa). Such approach aids users to easily migrate its Zenoh-based code to microcontrollers and embedded systems.
Nevertheless, in order to keep your code optimal some minor changes might be required while moving from Zenoh-C to Zenoh-Pico:
zc_* refers to Zenoh-C API only, while zp_* refers to Zenoh-Pico API only.</description></item><item><title>A Year Full of Zenoh</title><link>/blog/2020-01-01-zenohtude/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>/blog/2020-01-01-zenohtude/</guid><description>First of all we would like to take a moment to wish all of you a 2020 filled with joy, health, peace and success.
This year marks a very important landmark for us. After having kicked-off the Eclipse Edge Native working group, last December, we are bringing zenoh to Eclipse and are starting to work a Rust rewrite of the zenoh router. As part for the rewrite we have just about to complete a review of the zenoh protocol and will be updating the specification accordingly in the weeks to come.</description></item><item><title>Zenoh Tidings</title><link>/blog/2020-06-29-zenoh-tidings/</link><pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate><guid>/blog/2020-06-29-zenoh-tidings/</guid><description>In our last blog we had announced a rewrite of zenoh in Rust. The wrote the first version of zenoh in OCaml, a super-neat ML-derived functional programming language. OCaml allowed us to experiment very quickly and have good performances. Yet, one of the major feedback we were receiving from the community was that few people knew this programming language and this was limiting contributions. Beside, we had the desire to make zenoh even faster and smaller.</description></item><item><title>Zenoh Aithusa Hatched Out!</title><link>/blog/2020-10-08-aithusa/</link><pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate><guid>/blog/2020-10-08-aithusa/</guid><description>We have been waiting this very moment for several months. Months of patient dedication, months of hard and creative work. Months in which each and every member of the zenoh team has made his and her best to give our little dragon all it needed to succed in the complicated world of Internet Scale Protocols.
Today, at about 11.00 Paris Time Zenoh Aithusa Hatched Out!
Aithusa is the code-name for the first release of our Rust-based zenoh infrastructure, A supercharged of new features and improvements, including better performance, improved network scheduling, ROS2 integration, and DDS Plugin.</description></item><item><title>Minimizing Discovery Overhead in ROS2</title><link>/blog/2021-03-23-discovery/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><guid>/blog/2021-03-23-discovery/</guid><description>The amount of discovery traffic generated by ROS2 is a problem that has received an increasing attention in the community. The discovery overhead issue becomes extremely severe when running over wireless technologies, such as WiFi, and in particular in combination with more complex robots, robot swarms and tele-operation. The ROS2 Discovery Service has been proposed as a way to alleviate the problem, not necessarily to solve it.
In the reminder of this post I&amp;rsquo;ll explain the essence of problem, remind what was tried in the past and unveils a Zenoh based solution that (1) drastically reduces DDS discovery overhead &amp;ndash; from 97% to 99,9% in tested scenarios, (2) allows for peer-to-peer communication when useful, (3) enables efficient Internet-scale routing when necessary, and (3) does not require any changes to your existing ROS2 systems.</description></item><item><title>Integrating ROS2 with Eclipse zenoh</title><link>/blog/2021-04-28-ros2-integration/</link><pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate><guid>/blog/2021-04-28-ros2-integration/</guid><description>In our previous blog we demonstrated how the zenoh bridge for DDS allows to (1) bridge DDS communications through zenoh, and (2) reduce by up to 99.97% the discovery traffic between the nodes.
The previous blog was focusing on demonstrating the advantages of using zenoh as the mean for ROS2-to-ROS2 communication over wireless technologies. In this blog, we’ll go one step further and will demonstrate how you can easily write native zenoh applications —meaning that has no dependencies on ROS2 — and seamlessly interact with ROS2 applications.</description></item><item><title>Zenoh Reliability, Scalability and Congestion Control</title><link>/blog/2021-06-14-zenoh-reliability/</link><pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate><guid>/blog/2021-06-14-zenoh-reliability/</guid><description>Providing many to many reliable communications over a wide area network is challenging. This may even be an understatement, as theoretically, even simple point to point reliable communication over asynchronous channels requires either infinite amount of memory or giving up progress… but guess what, many real systems can’t afford neither of those restrictions. Thus, trade-offs need to be made regarding reliability for the system to work, scale smoothly and have sufficiently strong guarantees.</description></item><item><title>Zenoh overhead: a story from our community</title><link>/blog/2021-07-05-zenoh-overhead/</link><pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate><guid>/blog/2021-07-05-zenoh-overhead/</guid><description>Zenoh&amp;rsquo;s webpage states that zenoh has a minimal wire overhead of 5 bytes. This is the result of careful considerations in the zenoh design: from using Variable Length Encoding (VLE), to efficient mapping of resource keys and automatic batching.
If you are intrigued about this and want to know more, rest assured that you are not alone. In fact, the minimal overhead aspect of zenoh attracted a lot of attention and curiosity in our community that led to some interesting discussions on zenoh&amp;rsquo;s Discord Server.</description></item><item><title>Zenoh performance: a stroll in Rust async wonderland</title><link>/blog/2021-07-13-zenoh-performance-async/</link><pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate><guid>/blog/2021-07-13-zenoh-performance-async/</guid><description>Since its very first public release, zenoh provided impressive and easily accessible performances (see here). But instead of resting on laurels, the zenoh team has been relentlessly working on further improving them.
As a result of this work, we are happy to announce that zenoh delivers at least twice the performances than before:
more than 3.5M msg/s with 8 bytes payload, more than 45 Gb/s with 1 Megabyte payload, a latency as little as 35 µsec in backlogged scenarios.</description></item><item><title>Indy Autonomous Challenge (IAC): Experiences from the Trenches</title><link>/blog/2021-09-28-iac-experiences-from-the-trenches/</link><pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate><guid>/blog/2021-09-28-iac-experiences-from-the-trenches/</guid><description>The Indy Autonomous Challenge is a competition of autonomous racecars between teams of university students. Even if fully autonomous, each car needs to communicate with its team’s base station to report telemetry, status and to receive commands, such as emergency stop. The communication infrastructure between the cars and the base stations leverages CISCO Ultra-Reliable Wireless Backhaul (CURWB). As all cars share the same infrastructure, some limitations have been imposed on teams in terms of packet rates and bandwidth usage.</description></item><item><title>Zenoh goes embedded with zenoh-pico</title><link>/blog/2021-10-04-zenoh-pico-guide/</link><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid>/blog/2021-10-04-zenoh-pico-guide/</guid><description>In this post, we will introduce zenoh-pico, a lightweight implementation of Zenoh APIs in C, fully compatible with its Rust counterpart.
As a result of this work, we are happy to announce that we successfully deployed and tested Zenoh in Zephyr (reel_board and nucleo-f767zi) and Arduino (ESP32) compatible boards, with initial results showcasing a quite remarkable performance within the microcontrollers landscape:
Memory footprint of only ~2.8% (nucleo-f767zi), ~9.2% (reel_board), and ~0.</description></item><item><title>ROS 2 and microcontrollers integration via Zenoh-pico</title><link>/blog/2021-11-09-ros2-zenoh-pico/</link><pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate><guid>/blog/2021-11-09-ros2-zenoh-pico/</guid><description>In a previous blog, we showed how you can easily write native Zenoh applications and seamlessly interact with ROS 2 applications. This was exemplified by developing a native Zenoh teleoperation application to control a ROS 2 powered robot, namely a turtlebot or its simulation counterpart turtlesim, from anywhere in the world. In this blog, we will go one step further by trying to make it cool and fun &amp;ndash; together with a bit of nostalgia.</description></item><item><title>DragonBotOne Egg Hatching with Zenoh and Zenoh-Pico</title><link>/blog/2022-02-08-dragonbot/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><guid>/blog/2022-02-08-dragonbot/</guid><description>In previous blogs (1)(2), we showed how you can easily develop native Zenoh applications and seamlessly integrate them with ROS2 applications by using Zenoh bridge for DDS. In particular, this was successfully exemplified by using a TurtleBot, a well-known, low-cost, personal robot kit with open-source software and hardware.
In this blog, we go one step further to show how you can bring Zenoh down to the TurtleBot’s microcontroller and control it from a different geographic location via a Zenoh infrastructure.</description></item><item><title>Mobility, Latency and Energy saving</title><link>/blog/2022-03-30-zenoh-mobility/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate><guid>/blog/2022-03-30-zenoh-mobility/</guid><description>Connected cars, smart factories, swarms of robots… More and more applications need device mobility and require low latency for local device to device communications. With the increases in energy costs and its constrained availability, there is an increasing necessity to optimize data paths and to avoid unnecessary data transmissions – as just for clarity, communications takes the lion share in energy consumption when compared to computation.
Cloud centric architectures are energetically greedy and offer poor latency.</description></item><item><title>A Performance Evaluation on Rust Asynchronous Frameworks</title><link>/blog/2022-04-14-rust-async-eval/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>/blog/2022-04-14-rust-async-eval/</guid><description>As we previously mentioned in this blog post, Zenoh is written in Rust and leverages the async features to achieve high performance and scalability. At the present stage, we rely on the async_std framework – a decision that we took after a careful performance evaluation of the frameworks available in late 2019. This framework has proven to be quite effective, allowing Zenoh to reach more than 4M msg/s with 8 bytes payload and over 45Gb/s with 1MiB payload while keeping latency of ~30µsS.</description></item><item><title>Zenoh-Pico: Above and Beyond</title><link>/blog/2022-06-09-zenoh-pico-above-and-beyond/</link><pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate><guid>/blog/2022-06-09-zenoh-pico-above-and-beyond/</guid><description>In a previous blog post, we introduced Zenoh-Pico, an implementation of Zenoh for microcontrollers and embedded devices, along with a preliminary performance results and its integration on off-the-shelf robots (by bridging both legacy ROS2+DDS and Zenoh systems or by making it a full-fledged Zenoh system).
In this post, we will dive deeper on Zenoh-Pico, show, how Zenoh-Pico is capable of:
exchanging close to 2.5M msg/s for small payloads, and over 25 Gbps for larger messages, achieving end-to-end latency (i.</description></item><item><title>There is Land Besides IP: How to Cross It with Zenoh</title><link>/blog/2022-08-12-zenoh-serial/</link><pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate><guid>/blog/2022-08-12-zenoh-serial/</guid><description>Since the early 2000s the transition towards All-IP networks had been pushed as a natural evolutionary path. Today, IP is the dominant stack for packet-based integrated networks deployed worldwide. However, there is land beyond the ocean…in other words, there is an entire and growing non-IP universe that cannot be ignored. This universe expands at the outskirts of ordinary IP networks, where other protocols shine brighter because of more stringent requirements on overhead, energy-efficienciency, latency / real-time, and cost.</description></item><item><title>Zenoh Bahamut takes flight!</title><link>/blog/2022-09-30-zenoh-bahamut/</link><pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate><guid>/blog/2022-09-30-zenoh-bahamut/</guid><description>The little Zenoh dragon has vigorously grown up in the last year and now craves to take higher flight towards the highest peaks in marvellous lands.
The new 0.6.0 release of Zenoh is code-named Bahamut: the king of the good dragons. This reflects the major efforts the development team and the community have put in Zenoh to make it grow healthy, strong, wise, and resolute. Bahamut comes with a supercharged list of new features and improvements, including:</description></item><item><title>Keeping storages aligned in Zenoh</title><link>/blog/2022-11-29-zenoh-alignment/</link><pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate><guid>/blog/2022-11-29-zenoh-alignment/</guid><description>Zenoh Bahamut introduced a new experimental feature to support replicated storage alignment. With this feature, Zenoh ensures eventual consistency for storages that subscribe to the same key expression, even in the presence of network partitions and system faults. As promised, today we dig into some details about the storage alignment protocol. We will also give insights on how to efficiently configure a replicated storage in Zenoh.
Replicated Storages in Zenoh As we already know, Zenoh allows a user to configure storages on a given key expression.</description></item><item><title>Zenoh Charmander is coming to town</title><link>/blog/2023-01-10-zenoh-charmander/</link><pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate><guid>/blog/2023-01-10-zenoh-charmander/</guid><description>The new Zenoh 0.7.0 release, codename Charmander, brings to the table many features requested by the community on the Zenoh’s Discord server. Charmander introduces some long-awaited functionalities:
Mutual TLS authentication; MQTT plugin; S3 storage backend; some new freshly-landed functionalities:
Query payload; C++ binding; Connectivity status and notifications; and MISRA-C compliance for Zenoh-Pico.
Mutual TLS authentication Until now, Zenoh was only supporting server-based authentication. That is the kind of authentication you experience when surfing the web using HTTPS: your browser verifies if the server it is connecting to is legit, but the server does not authenticate your browser.</description></item><item><title>The Blue Dragon meets the Wire’s Shark</title><link>/blog/2023-01-17-zenoh-wireshark/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate><guid>/blog/2023-01-17-zenoh-wireshark/</guid><description>In this blog post, we will introduce Zenoh’s best friend, the Zenoh protocol dissector for Wireshark. It allows you to inspect and understand the Zenoh packets exchanged in your network. It is especially useful when you need to:
troubleshoot network problems, examine security issues, verify network applications, debug protocol implementations, and even learn about Zenoh’s protocol internals. But let’s find out more!
What is Wireshark? Wireshark is a widely-used network protocol analyzer, mostly used to sniff which packets are crossing your network.</description></item><item><title>Data Flow programming with Zenoh-Flow</title><link>/blog/2023-02-10-zenoh-flow/</link><pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate><guid>/blog/2023-02-10-zenoh-flow/</guid><description>Zenoh-Flow was the concluding episode of Zenoh’s webinar series &amp;ldquo;Taming the Dragon&amp;rdquo; released recently and available on ZettaScale’s Youtube channel. In case you haven’t watched the webinar (which you should definitely do!), click here! This blog provides additional insights about Zenoh-Flow: its origin, motivating use-cases, and upcoming features.
Data Flow Programming As we explained in our webinar, Zenoh-Flow is Zenoh’s native Data Flow Programming framework, offering a common abstraction applicable from the Data Center down to the microcontroller.</description></item><item><title>The Zenoh Community</title><link>/community/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/community/</guid><description>Communication The Zenoh community is most readily found on its Discord server, where you&amp;rsquo;re welcome to ask questions, report problems, or pitch ideas.
Issues GitHub is used for tracking issues.
If your issue is related to the Zenoh protocol, the infrastructure or the REST API, the primary location is https://github.com/eclipse-zenoh/zenoh/issues.
If your issue is related to an API, please use the GitHub issues related to the API:
Python API C API If your issue is instead related to a plugin, please use the GitHub issues related to the plugin:</description></item><item><title>Zenoh Adopters</title><link>/adopters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/adopters/</guid><description>Below is a list of companies, research institutes and foundations that adopted, supported or contributed to Zenoh. If you cannot find your logo, please post a message on the Zenoh&amp;rsquo;s discord server and we&amp;rsquo;ll add it right away.</description></item><item><title>Zenoh Use cases</title><link>/usecases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/usecases/</guid><description> Controlling a robot using Zenoh Zenoh in robotics Indy autonomous challenge Autonomous train Autonomous car in simulator An auditable register Zenoh in academics</description></item></channel></rss>