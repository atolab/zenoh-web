<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on zenoh - The Zero Overhead, Pub/Sub, Store, Query, and Compute Protocol.</title><link>/docs/</link><description>Recent content in Docs on zenoh - The Zero Overhead, Pub/Sub, Store, Query, and Compute Protocol.</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>What is zenoh?</title><link>/docs/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/overview/</guid><description>With the steady increase in the number of network connected devices we are experiencing a new level of heterogeneity with respect to computing, storage and communication capabilities, as well as new challenges with respect to the scale at which data is produced and needs to be consumed.
Additionally, for performance, efficiency and privacy reasons, there is an increasing desire to keep the data processing as close as possible to the source, while at the same time not hindering access to geographically remote applications.</description></item><item><title>Key concepts</title><link>/docs/getting-started/key-concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/key-concepts/</guid><description>Deployment units zenoh provides 3 kinds of deployment units: peers, clients and routers.
peer application A user application using a zenoh API and able to: Communicate with other peers in a peer-to-peer topology Communicate with other peers in a mesh topology Communicate with a wide system through zenoh routers client application A user application using a zenoh API and that connects to a single zenoh router (or a single peer) to communicate with the rest of the system.</description></item><item><title>Installation</title><link>/docs/getting-started/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/installation/</guid><description>To get up and running with zenohyou will have to install the router and then get hold of the API you would like to use to write your applications.
Installing the zenoh router The zenoh router (a.k.a. zenohd) and its plugins are currently available as a pre-built binaries for Linux x86 64-bit, MacOS x86 64-bit and Windows x86 64-bit platforms. All release packages can be downloaded from:
https://download.eclipse.org/zenoh/zenoh/latest/ You can also install it via a package manager on MacOS (homebrew) or Linux Debian (apt).</description></item><item><title>For a Quick Test using Docker</title><link>/docs/getting-started/quick-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/quick-test/</guid><description>This page describe how to perform a quick test of zenoh, using a Docker image.
Run zenoh router in a Docker container The zenoh router is also available in a Docker image. You can deploy a single instance on your local host just running:
docker run --init -p 7447:7447/tcp -p 8000:8000/tcp eclipse/zenoh The ports used by zenoh are the following:
7447/tcp : the zenoh protocol via TCP 8000/tcp : the zenoh REST API ⚠️ WARNING ⚠️: Docker doesn&amp;rsquo;t support UDP multicast between a container and its host (see cases moby/moby#23659, moby/libnetwork#2397 or moby/libnetwork#552).</description></item><item><title>Your First zenoh app</title><link>/docs/getting-started/first-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/first-app/</guid><description>Getting started with zenoh is quite straightforward. Below we will show you how to create a simple telemetry application. Let&amp;rsquo;s assume that we have some sensor, say a temperature sensor, and we want to store this temperature into a zenoh storage. Later on, we want to retrieve this temperature from the zenoh storage.
Before cranking some code, let&amp;rsquo;s define some terminology.
zenohdeals with keys/valueswhere each key is a pathand is associated to a value.</description></item><item><title>Abstractions</title><link>/docs/manual/abstractions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/abstractions/</guid><description>Zenoh is a distributed service to define, manage and operate on key/value spaces.
The key abstractions at the core of zenoh are the following:
Key Zenoh uses paths as keys. In all zenoh documentations, &amp;ldquo;key&amp;rdquo; and &amp;ldquo;path&amp;rdquo; are synonym.
Path A set of strings separated by '/' , as in a filesystem path. A Path cannot contain any '*' character.
Examples of paths: /demo/example/test , /com/adlink/building/fr/floor/1/office/2 &amp;hellip;
A path can be absolute (i.</description></item><item><title>Zenoh plugins</title><link>/docs/manual/plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/plugins/</guid><description>The zenoh router (zenohd executable) supports the loading of plugins at start-up.
A zenoh plugin is a library that can be loaded by the zenoh router at start-up. It shares a runtime with it, allowing the plugin to use the regular zenoh and/or zenoh-ne APIs with the same peer ID.
By default the zenoh router will automatically search and load plugins library files with such names:
on Unix/Linux: libzplugin_*.so on MacOS: libzplugin_*.</description></item><item><title>REST plugin</title><link>/docs/manual/plugin-http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/plugin-http/</guid><description>The REST plugin provides access to the zenoh REST API.
Library name: zplugin_rest
Startup arguments (added to zenoh router&amp;rsquo;s startup arguments):
--rest-http-port=[PORT] : The REST plugin&amp;rsquo;s http port (default: 8000)</description></item><item><title>Storages plugin</title><link>/docs/manual/plugin-storages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/plugin-storages/</guid><description>The Storages plugin provides the management of Backends and Storages.
It allows you at runtime to dynamically add/remove backends and storages. More details in Zenoh backends chapter.
When adding a backend, a short name of the backend library can be provided instead of the complete path to the library file. In such case the Storages plugin will search and load the library file with such name:
on Unix/Linux: libzbackend_&amp;lt;name&amp;gt;.so on MacOS: libzbackend_&amp;lt;name&amp;gt;.</description></item><item><title>QUIC transport</title><link>/docs/manual/quic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/quic/</guid><description>Zenoh supports QUIC as a transport protocol.
As you may already know, QUIC is a UDP-based, stream-multiplexing, encrypted transport protocol. It natively embedes TLS for encryption, authentication and confidentiality.
As of today, the only supported TLS authentication mode in zenoh is server-authentication: clients validate the server TLS certificate but not the other way around. That is, the same way of operating in the web where the web browsers validate the identity of the server via means of the TLS certificate.</description></item><item><title>TLS authentication</title><link>/docs/manual/tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/tls/</guid><description>Zenoh supports TLS as a transport protocol. As of today, the only supported TLS authentication mode is server-authentication: clients validate the server TLS certificate but not the other way around. That is, the same way of operating in the web where the web browsers validate the identity of the server via means of the TLS certificate.
TLS certificates creation In order to use TLS as a transport protocol, we need first to create the TLS certificates.</description></item><item><title>User-Password authentication</title><link>/docs/manual/user-password/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/user-password/</guid><description>Zenoh supports basic user-password authentication. Clients and peers can use user and password for authentication against a router or a peer. The configuration of credentials is done via a configuration file defining certain zenoh properties.
Client configuration The required zenoh properties for basic user-password authentication for a client are user and password. A configuration file for a client would be:
user=clientusername password=clientpassword When using such configuration, the client will use the provided user and password to authenticate against any peer or router.</description></item><item><title>Zenoh backends and storages</title><link>/docs/manual/backends/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/backends/</guid><description>In zenoh a backend is a storage technology.
Concretely, it&amp;rsquo;s a software library providing implementation of Storages. It usualy leverage a third-party technology (e.g. InfluxDB, SQLite, PostgreSQL&amp;hellip;) to store the keys/values published in zenoh.
The backends and storages are managed in each zenoh router by its Storages plugin.
Backends management The backends provided by a zenoh router can be managed via the admin space using zenoh PUT/GET/DELETE operations on such Path:</description></item><item><title>List of backends</title><link>/docs/manual/backends-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/manual/backends-list/</guid><description>Here is the list of the available backends:
Backend Description Github repo &amp;amp; doc Memory In-memory storages (simple hashmap) see below InfluxDB Storages in InfluxDB databases. eclipse-zenoh/zenoh-backend-influxdb File System Storages on local files system, each key/value in a file. eclipse-zenoh/zenoh-backend-filesystem Memory Backend A backend storing paths/values into an in-memory hashmap.
The memory backend implementation is not provided by a backend library but is embeded within the Storages plugin itself.</description></item><item><title>API documentations</title><link>/docs/apis/apis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/apis/apis/</guid><description>All the client APIs documentations are avaliable on Read the Docs:
Rust https://zenoh-rust.readthedocs.io/
C https://zenoh-c.readthedocs.io/
Python https://zenoh-python.readthedocs.io/
REST API Zenoh also offers a REST API via the zenoh-rest plugin. When starting zenoh with default options, this REST plugin is automatically started on port 8000 and ready to answer HTTP requests.
The full zenoh key/value space is accessible via this REST API, including the Admin Space under the '/@'prefix.
GET Binds to the get(selector) operation on zenoh.</description></item></channel></rss>